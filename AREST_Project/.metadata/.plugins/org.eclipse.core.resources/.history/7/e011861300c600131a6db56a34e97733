package client.view.abuseReport;

import java.awt.CardLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

import client.abuse_report.models.Abuser;
import client.abuse_report.models.Guardian;
import client.abuse_report.models.ReportContainer;
import client.abuse_report.models.Reporter;
import client.abuse_report.models.Victim;

/**
 * Controls the flow of Abuse Report creation. This class also commits changes
 * to the report container.
 * @author Matt Orsini
 *
 */
public class CreateReportGUI extends JFrame {

	final private static boolean DEBUG_REPORTER   = true;
	final private static boolean DEBUG_VICTIM     = true;
	final private static boolean DEBUG_VICTIM_ADD = true;
	final private static boolean DEBUG_GUARDIAN   = true;
	final private static boolean DEBUG_DESCR      = true;
	
	final private static String REPORTER_PANEL         = "Reporter Panel";
	final private static String VICTIM_PANEL           = "Victim Panel";
	final private static String VICTIM_ADD_INFO_PANEL  = "VICTIM_ADD_PANEL";
	final private static String GUARDIAN_PANEL         = "Guardian Panel";
	final private static String DESCRIPTION_PANEL      = "Description Panel";
	
	private JFrame mFrame;
	private JPanel containerPanel;
	private JPanel mCards;
	private JButton previousButton;
	private JButton cancelButton;
	private JButton nextButton;
	private CardLayout clContainer;
	
	private static ReportContainer reportContainer;
	private static ReporterGUI reporterGUI;
	private static VictimGUI   victimGUI;
	private static VictimAdditionalInfoGUI victimAddGUI;
	private static GuardianGUI guardianGUI;
	private static DescriptionGUI descriptionGUI;
	
	private Reporter reporter;
	private Abuser abuser;
	private Victim victim;
	private Guardian guardian;
	
	private static int componentIndex = 0;
	
	private final Object[] option = {"Yes", "No"};
	
	/**
	 * Create the panel.
	 */
	public CreateReportGUI() {
		reportContainer = new ReportContainer();
		reporter = new Reporter();
		victim = new Victim();
		abuser = new Abuser();
		guardian = new Guardian();
		componentIndex = 0;
		initialize();	
	}
	
	/**
	 * Increment the component index in the cardlayout
	 */
	private void incrementCardLayoutCounter() {
		if(componentIndex != mCards.getComponentCount()) {
			componentIndex++;
		}
	}
	
	/**
	 * Decrement the component index in the cardlayout
	 */
	private void decrementCardLayoutCounter() {
		if(componentIndex != 0) {
			componentIndex--;
		}
	}
	
	/**
	 * Get the index of the current card being displayed to the user.
	 * @return - the current component's index in the cardlayout being displayed to the user.
	 */
	public int getCardComponentIndex() {
		return componentIndex;
	}
	
	/**
	 * Initialize components in this Panel
	 */
	public void initialize() {
		mFrame = new JFrame();
		
		containerPanel = new JPanel();
		mFrame.getContentPane().add(containerPanel);
		GridBagLayout gbl_containerPanel = new GridBagLayout();
		gbl_containerPanel.columnWidths = new int[] {0};
		gbl_containerPanel.columnWeights = new double[]{0.0, 0.0, 0.0};
		gbl_containerPanel.rowWeights = new double[]{0.0, 0.0};
		containerPanel.setLayout(gbl_containerPanel);
		
		previousButton = new JButton("Previous");
		previousButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event ) {
				if (event.getID() == ActionEvent.ACTION_PERFORMED) {
					if(getCardComponentIndex() != 0) {
						clContainer.previous(mCards);
						nextButton.setText("Next");
					}
					decrementCardLayoutCounter();
				}
			}
		});
		
		// Create all the cards in this panel.
		reporterGUI = new ReporterGUI();
		reporterGUI.setName(REPORTER_PANEL);
		victimGUI   = new VictimGUI();
		victimGUI.setName(VICTIM_PANEL);
		victimAddGUI = new VictimAdditionalInfoGUI();
		victimAddGUI.setName(VICTIM_ADD_INFO_PANEL);
		guardianGUI = new GuardianGUI();
		guardianGUI.setName(GUARDIAN_PANEL);
		descriptionGUI = new DescriptionGUI();
		descriptionGUI.setName(DESCRIPTION_PANEL);
		
		// Create the CardLayout and add the cards
		CardLayout cl_mCards = new CardLayout();
		mCards = new JPanel(cl_mCards);
		mCards.add(reporterGUI, REPORTER_PANEL);
		mCards.add(victimGUI,   VICTIM_PANEL);
		mCards.add(victimAddGUI, VICTIM_ADD_INFO_PANEL);
		mCards.add(guardianGUI, GUARDIAN_PANEL);
		mCards.add(descriptionGUI, DESCRIPTION_PANEL);
		
		clContainer = (CardLayout) mCards.getLayout();
		GridBagConstraints gbc_mCards = new GridBagConstraints();
		gbc_mCards.anchor = GridBagConstraints.NORTHWEST;
		gbc_mCards.insets = new Insets(0, 5, 5, 0);
		gbc_mCards.gridwidth = 3;
		gbc_mCards.gridx = 0;
		gbc_mCards.gridy = 0;
		containerPanel.add(mCards, gbc_mCards);
		
		GridBagConstraints gbc_previousButton = new GridBagConstraints();
		gbc_previousButton.fill = GridBagConstraints.HORIZONTAL;
		gbc_previousButton.insets = new Insets(0, 5, 0, 0);
		gbc_previousButton.gridx = 0;
		gbc_previousButton.gridy = 1;
		gbc_previousButton.weightx = 0.5;
		containerPanel.add(previousButton, gbc_previousButton);
		
		nextButton = new JButton("Next");
		nextButton.setVerticalAlignment(SwingConstants.BOTTOM);
		nextButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent action) {
				if(action.getID() == ActionEvent.ACTION_PERFORMED) {
					boolean validInfo = false;
					if(mCards.getComponent(getCardComponentIndex()).getName() ==  REPORTER_PANEL) {
						// Check and commit changes to this panel and the model
						if(!DEBUG_REPORTER) validInfo = true;
						else {
							validInfo = reporterGUI.isValidInfo();
							if(validInfo){
								// Commit changes to the model.
								reporter = reporterGUI.commitReporter(reporter);
								abuser =  reporterGUI.commitAbuser(abuser);
							}
						}
					} else if (mCards.getComponent(getCardComponentIndex()).getName() == VICTIM_PANEL) {
						if(!DEBUG_VICTIM) validInfo = true;
						else { 
							validInfo = victimGUI.isValidInfo();
							if(validInfo) {
								victim = victimGUI.commitVictim(victim);
							}
						}
						
					} else if (mCards.getComponent(getCardComponentIndex()).getName() == VICTIM_ADD_INFO_PANEL) {
						if(!DEBUG_VICTIM_ADD) validInfo = true;
						else {
							validInfo = victimAddGUI.isValidInfo();
							if(validInfo) {
								victim = victimAddGUI.commitVictim(victim);
							}
						}
					} else if(mCards.getComponent(getCardComponentIndex()).getName() == GUARDIAN_PANEL) {
						if(!DEBUG_GUARDIAN) validInfo = true;
						else { 
							validInfo = guardianGUI.isValidInfo();
							if(validInfo) {
								guardian = guardianGUI.commitGuardian(guardian);
								reportContainer = guardianGUI.getReportContainerInfo(reportContainer);
							}
						}
					} else if(mCards.getComponent(getCardComponentIndex()).getName() == DESCRIPTION_PANEL) {
						if(!DEBUG_DESCR) validInfo = true;
						else {
							validInfo = descriptionGUI.isValidInfo();
							if(validInfo) {
								reportContainer = descriptionGUI.getReportContainerInfo(reportContainer);
							}
						}
					}
					// Only proceed if the information is valid
					if(validInfo){
						if(componentIndex != (mCards.getComponents().length - 1)) {
							clContainer.next(mCards);
							incrementCardLayoutCounter();
						}
						if(componentIndex == (mCards.getComponentCount() -1)) {
							nextButton.setText("Submit");
						} else {
							componentIndex = 0;
						}
					}
				}
			}
		});
		GridBagConstraints gbc_nextButton = new GridBagConstraints();
		gbc_nextButton.fill = GridBagConstraints.HORIZONTAL;
		gbc_nextButton.insets = new Insets(0, 5, 0, 5);
		gbc_nextButton.gridx = 2;
		gbc_nextButton.gridy = 1;
		gbc_nextButton.weightx = 0.5;
		gbc_nextButton.weighty = 1;
		containerPanel.add(nextButton, gbc_nextButton);
		
		cancelButton = new JButton("Cancel");
		cancelButton.addActionListener(new ActionListener() {
			/**
			 * This actionlistener determines if the window should be disposed. We've given the user
			 * A second chance to go back on their decision to exit the createreport. 
			 */
			@Override
			public void actionPerformed(ActionEvent action) {
				dispose();
				if(action.getID() == ActionEvent.ACTION_PERFORMED){
					int response = JOptionPane.showOptionDialog(mFrame, "Are you sure you want to exit?\n"
							+ "All changes will be lost.", "Are you sure?", JOptionPane.YES_NO_OPTION, 
							JOptionPane.QUESTION_MESSAGE, null, option, option[1]);
					if(response == JOptionPane.YES_OPTION) {
						mFrame.dispose();
					} 
				}
			}
		});
		GridBagConstraints gbc_cancelButton = new GridBagConstraints();
		gbc_cancelButton.fill = GridBagConstraints.HORIZONTAL;
		gbc_cancelButton.gridx = 1;
		gbc_cancelButton.gridy = 1;
		gbc_cancelButton.weightx = 0.5;
		gbc_cancelButton.insets = new Insets(0, 5, 0, 0);
		containerPanel.add(cancelButton, gbc_cancelButton);

		mFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		mFrame.pack();
		mFrame.setResizable(false);
		mFrame.setVisible(true);
		
	}
	
		public void showFrame() {
		mFrame.setVisible(true);
	}
	
}
