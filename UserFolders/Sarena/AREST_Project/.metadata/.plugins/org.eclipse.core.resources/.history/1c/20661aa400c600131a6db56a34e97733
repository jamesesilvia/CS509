package client.models;

/**
 * This class contains all relevant information to the abuse report. An abuse report is constructed of the following:
 * 1.) A reporter - the person who files the report.
 * 2.) An Abuser  - the person who is alleged of abusing a client.
 * 3.) A guardian (if necessary) - person responsible for the victim outside the alleged victim's caretaker.
 * 4.) A victim   - the person who is allegedly being or has been abused.
 * 
 * @author Matt Orsini
 *
 */

// FIXME: Change to report.
public class ReportContainer {

	// FIXME: put in ID stuff
	private Long id;
	
	private static final int MAX_NUM_COLLATERAL_CONTACTS = 5;
	
	private Reporter reporter;
	private Abuser   abuser;
	private Guardian guardian;
	private Victim   victim;
	private Individual[] collateralContacts = new Individual[MAX_NUM_COLLATERAL_CONTACTS]; 
	
	private String abuseDescr;
	private String victimRisk;
	private String injuryList;
	private String witnesses;
	private String caregiverRel;
	private boolean isOralReportFiled;
	private String oralReportFiledTime;
	private boolean isRiskToInvestigator;
	private String riskDescrToInvestigator;
	
	// TODO add
	private String username;
	private String result;
	private String status;
	private String date; // date of report filed. FIXME: Do we need this.
	
	/**
	 * Construction of a new report container. Create the necessary objects an initializes the booleans 
	 * required for this abuse report.
	 */
	public ReportContainer() {
		// Construct new objects
		setReporter(new Reporter());
		setAbuser(new Abuser());
		setGuardian(new Guardian());
		setVictim(new Victim());
		
		// False unless set otherwise.
		setOralReportFiled(false);
		setRiskToInvestigator(false);
	}
	
	/**
	 * Get the reporter in this report container.
	 * @return the reporter.
	 */
	public Reporter getReporter() {
		return reporter;
	}

	/**
	 * Set the reporter in this report container.
	 * @param reporter - the reporter to set.
	 */
	public void setReporter(Reporter reporter) {
		this.reporter = reporter;
	}

	/**
	 * Get the guardian in this report container.
	 * @return the guardian.
	 */
	public Guardian getGuardian() {
		return guardian;
	}

	/**
	 * Set the guardian in this report container.
	 * @param guardian - the guardian to set.
	 */
	public void setGuardian(Guardian guardian) {
		this.guardian = guardian;
	}

	/**
	 * Get the abuser in this report container.
	 * @return the abuser.
	 */
	public Abuser getAbuser() {
		return abuser;
	}

	/**
	 * Set the abuser in this report container.
	 * @param abuser - the abuser.
	 */
	public void setAbuser(Abuser abuser) {
		this.abuser = abuser;
	}

	/**
	 * Get the victim in this report container.
	 * @return the victim.
	 */
	public Victim getVictim() {
		return victim;
	}

	/**
	 * Set the victim in this report container.
	 * @param victim - the victim to set.
	 */
	public void setVictim(Victim victim) {
		this.victim = victim;
	}

	
	/**
	 * Get the abuse description for this report.
	 * @return the abuse description.
	 */
	public String getAbuseDescr() {
		return abuseDescr;
	}
	
	/**
	 * Set the abuse description for this abuse report.
	 * @param abuseDescr - the abuse description.
	 */

	public void setAbuseDescr(String abuseDescr) {
		this.abuseDescr = abuseDescr;
	}

	/**
	 * Get the potential risk to the victim.
	 * @return the risk to the victim.
	 */
	public String getVictimRisk() {
		return victimRisk;
	}

	/**
	 * Set the potential risk to the victim.
	 * @param victimRisk - the risk to the victim.
	 */
	public void setVictimRisk(String victimRisk) {
		this.victimRisk = victimRisk;
	}

	/**
	 * Get the injury list associated with this abuse report.
	 * @return - the injury list to the victim.
	 */
	public String getInjuryList() {
		return injuryList;
	}

	/**
	 * Set the injury list for this abuse report.
	 * @param injuryList
	 */
	public void setInjuryList(String injuryList) {
		this.injuryList = injuryList;
	}

	/**
	 * Get the witnesses of the reported abuse.
	 * @return the witnesses of the abuse.
	 */
	public String getWitnesses() {
		return witnesses;
	}

	/**
	 * Set the witnesses of the reported abuse.
	 * @param witnesses - the witnesses of the abuse.
	 */
	public void setWitnesses(String witnesses) {
		this.witnesses = witnesses;
	}

	/**
	 * Get the relationship between the alleged abuser and the alleged victim. This could be
	 * the assistance, if any, the alleged abuser provides to the person with the disability.
	 * @return the relationship between the alleged abuser and the alleged victim.
	 */
	public String getCaregiverRel() {
		return caregiverRel;
	}

	/**
	 * Set the relationship between the alleged abuser and the alleged victim. This could be
	 * the assistance, if any, the alleged abuser provides to the person with the disability.
	 * @param caregiverRel - the relationship between the alleged abuser and the alleged victim.
	 */
	public void setCaregiverRel(String caregiverRel) {
		this.caregiverRel = caregiverRel;
	}

	/**
	 * Returns whether or not an oral report has been filed with the DPPC hotline. 
	 * @return - true if a report has been filed, false otherwise.
	 */
	public boolean isOralReportFiled() {
		return isOralReportFiled;
	}

	/**
	 * Sets whether or not an oral report has been filed with the DPPC hotline.
	 * @param isOralReportFiled - whether or not a report has been filed with the DPPC hotline.
	 */
	public void setOralReportFiled(boolean isOralReportFiled) {
		this.isOralReportFiled = isOralReportFiled;
	}

	/**
	 * Returns when the last time in which an oral report was filed.
	 * @return - the time the oral report was filed.
	 */
	public String getOralReportFiledTime() {
		return oralReportFiledTime;
	}

	/**
	 * Sets the oral report filed time. This is a date, month, hour, and minute representation
	 * of the last time the report was filed on the DPPC hotline.
	 * @param oralReportFiledTime
	 */
	public void setOralReportFiledTime(String oralReportFiledTime) {
		this.oralReportFiledTime = oralReportFiledTime;
	}

	/**
	 * Returns whether or not there is a potential risk to the investigator.
	 * @return - true if a risk exists, false otherwise.
	 */
	public boolean isRiskToInvestigator() {
		return isRiskToInvestigator;
	}

	/**
	 * Set as true if a risk to the investigator exists in this abuse case. Do not set otherwise.
	 * @param isRiskToInvestigator
	 */
	public void setRiskToInvestigator(boolean isRiskToInvestigator) {
		this.isRiskToInvestigator = isRiskToInvestigator;
	}

	/**
	 * Returns the potential risk(s) to the investigator.
	 * @return the risk to the investigator.
	 */
	public String getRiskDescrToInvestigator() {
		return riskDescrToInvestigator;
	}

	/**
	 * Sets the potential risk(s) to the investigator.
	 * @param riskToInvestigator - the risk(s) to the investigator.
	 */
	public void setRiskDescrToInvestigator(String riskToInvestigator) {
		this.riskDescrToInvestigator = riskToInvestigator;
	}

	/**
	 * Get all the collateral contacts for this abuse report.
	 * @return
	 */
	public Individual[] getCollateralContacts() {
		return collateralContacts;
	}

	/**
	 * Set all the collateral contacts for this abuse report.
	 * @param collateralContacts
	 */
	public void setCollateralContacts(Individual[] collateralContacts) {
		this.collateralContacts = collateralContacts;
	}
	
	/**
	 * Set the collateral contact at the specified position in the array.
	 * @param collateralContact - the collateral contact.
	 * @param i - the array index.
	 */
	public void setCollateralContactAt(Individual collateralContact, int i) {
		this.collateralContacts[i] = collateralContact;
	}
	
	/**
	 * Get the collateral contact at the specified position in the array.
	 * @param i - the postition to get the collateral contact from.
	 * @return the collateral contact.
	 */
	public Individual getCollateralContactAt(int i) {
		return this.collateralContacts[i];
	}
}
